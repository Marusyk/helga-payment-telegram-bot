using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;
using System.Text;
using System.Text.Json;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace Helga.Function;

public sealed class TelegramBot(ITelegramBotClient botClient, PrivatBankClient pbClient, DataStorage dataStorage, ILogger<TelegramBot> logger)
{
    private const string HelpMessage = "–ü–∏—à–∏:\n–ö—É—Ä—Å –∞–±–æ /rate - —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∫—É—Ä—Å\n–°—Ç–∞–Ω –∞–±–æ /state - –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω\n/apartment - –¥–æ–¥–∞—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä—ñ\n/parking - –¥–æ–¥–∞—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–æ –ø–∞—Ä–∫–æ–º—ñ—Å—Ü—é";
    private const decimal ApartmentMonthly = 2210.40m;
    private const decimal ParkingMonthly = 666.90m;

    [Function(SetupBot.UpdateFunctionName)]
    public async Task Run([HttpTrigger(AuthorizationLevel.Anonymous, "post")] HttpRequestData request)
    {
        logger.LogInformation("C# trigger function processed a request.");

        long chatId = 0;
        try
        {
            var body = await request.ReadAsStringAsync()
                ?? throw new ArgumentNullException(nameof(request));

            var update = JsonSerializer.Deserialize<Update>(body, JsonBotAPI.Options);
            if (update is null)
            {
                logger.LogWarning("Unable to deserialize Update object.");
                return;
            }

            chatId = update.Message.Chat.Id;

            if (update.Message.Text.Equals("/start", StringComparison.OrdinalIgnoreCase))
            {
                await botClient.SendMessage(chatId, $"üëã –ü—Ä–∏–≤—ñ—Ç –Ü—Ä–∏–Ω–∫–∞ –∞–±–æ –†–æ–º–∞–Ω!\n\n{HelpMessage}");
            }
            else if (update.Message.Text.Equals("/rate", StringComparison.OrdinalIgnoreCase) || update.Message.Text.Contains("–∫—É—Ä—Å", StringComparison.OrdinalIgnoreCase))
            {
                await HandleRateCommand(chatId);
            }
            else if (update.Message.Text.Equals("/state", StringComparison.OrdinalIgnoreCase) || update.Message.Text.Contains("—Å—Ç–∞–Ω", StringComparison.OrdinalIgnoreCase))
            {
                await HandleStateCommand(chatId);
            }
            else if (update.Message.Text.Equals("/apartment", StringComparison.OrdinalIgnoreCase))
            {
                await HandlePayApartmentCommand(chatId);
            }
            else if (update.Message.Text.Equals("/parking", StringComparison.OrdinalIgnoreCase))
            {
                await HandlePayParkingCommand(chatId);
            }
            else
            {
                await botClient.SendMessage(chatId, $"üôà –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞! {HelpMessage}");
            }
        }
        catch(Exception e)
        {
            logger.LogError("Exception: {Message}", e.Message);
            if (chatId != 0)
            {
                await botClient.SendMessage(chatId, $"üòµ Error: {e.Message}");
            }
        }
    }

    private async Task HandlePayApartmentCommand(long chatId)
    {
        var rate = await pbClient.GetRate();
        await dataStorage.AddPayment(ApartmentMonthly, rate.BuyPrice, PaymentType.Apartment);
        var message = dataStorage.GetPayments();

        await botClient.SendMessage(chatId, $"üí≤ –û–ø–ª–∞—Ç–∞ –∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ –∫—É—Ä—Å—É {rate.BuyPrice:F2}\n\n {message}");
    }

    private async Task HandlePayParkingCommand(long chatId)
    {
        var rate = await pbClient.GetRate();
        await dataStorage.AddPayment(ParkingMonthly, rate.BuyPrice, PaymentType.Parking);
        var message = dataStorage.GetPayments();

        await botClient.SendMessage(chatId, $"üí≤ –û–ø–ª–∞—Ç–∞ –∑–∞ –ø–∞—Ä–∫—ñ–Ω–≥ –ø–æ –∫—É—Ä—Å—É {rate.BuyPrice:F2}\n\n {message}");
    }

    private async Task HandleStateCommand(long chatId)
    {
        var message = dataStorage.GetPayments();
        await botClient.SendMessage(chatId, message);
    }

    private async Task HandleRateCommand(long chatId)
    {
        var total = ApartmentMonthly + ParkingMonthly; // 2 877.3$

        var rate = await pbClient.GetRate();
        StringBuilder sb = new($"{rate.State} –ö—É—Ä—Å: {rate.BuyPrice:F2} –Ω–∞ {rate.Date} \n\n–ó –≤–∞—Å {total}$ * {rate.BuyPrice:F2} = {total * rate.BuyPrice:F2} –≥—Ä–Ω");
        sb.AppendLine(Environment.NewLine);
        sb.AppendLine($"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {ApartmentMonthly}$ * {rate.BuyPrice:F2} = {ApartmentMonthly * rate.BuyPrice:F2}");
        sb.AppendLine($"–ü–∞—Ä–∫–æ–º—ñ—Å—Ü–µ: {ParkingMonthly}$ * {rate.BuyPrice:F2} = {ParkingMonthly * rate.BuyPrice:F2}");
        sb.AppendLine(Environment.NewLine);
        sb.AppendLine("üìÖ –ö—É—Ä—Å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:");
        var rates = await pbClient.GetRates();
        foreach (var r in rates)
        {
            sb.AppendLine($"{r.Date} –ö—É—Ä—Å: {r.BuyPrice:F2}");
        }

        await botClient.SendMessage(chatId, sb.ToString());
    }
}